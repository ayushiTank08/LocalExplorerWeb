"use client";

import { useState, useEffect } from "react";
import { usePathname } from 'next/navigation';
import { useAppSelector } from '../store/hooks';
import type { Metadata } from "next";
import { initTokenRefresh } from "@/utils/tokenRefresh";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import StoreProvider from "../store/StoreProvider";
import Header from "./components/Header/Header/Header";
import SubHeader from "./components/Header/SubHeader/SubHeader";
import { LocationDetailsSubheader } from "./components/Header/SubHeader/LocationDetailsSubheader";
import Footer from "./components/Footer/Footer";
import { NotificationCenter } from "@/components/Notifications/NotificationCenter";

function SubHeaderWrapper({ isSearchActive }: { isSearchActive: boolean }) {
  const pathname = usePathname();
  const { selectedPlace } = useAppSelector((state: any) => state.places);
  
  const isDetailsPage = pathname?.startsWith('/pages/DetailsPage');

  if (isDetailsPage && selectedPlace) {
    return (
      <LocationDetailsSubheader 
        title={selectedPlace.Title}
        category={selectedPlace.Category || 'Location'}
        imageUrl={selectedPlace.Thumb || selectedPlace.Image}
      />
    );
  }
  return <SubHeader isSearchActive={isSearchActive} />;
}

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const [isSearchActive, setIsSearchActive] = useState(false);

  useEffect(() => {
    const cleanup = initTokenRefresh();
    return () => {
      cleanup?.();
    };
  }, []);

  const toggleSearch = () => {
    setIsSearchActive(!isSearchActive);
  };

  return (
    <html lang="en" className={`${geistSans.variable} ${geistMono.variable} light`}>
      <head>
        <title>Ocala</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="color-scheme" content="light" />
        <meta name="theme-color" content="#ffffff" />
      </head>
      <body className="min-h-screen flex flex-col">
        <StoreProvider>
          <div className="min-h-screen flex flex-col">
            <NotificationCenter />
            <Header onSearchToggle={() => setIsSearchActive(!isSearchActive)} />
            <SubHeaderWrapper isSearchActive={isSearchActive} />
            <main className="flex-grow bg-[var(--color-primary-lighter)] pb-16 lg:pb-0">
              {children}
            </main>
            <Footer />
          </div>
        </StoreProvider>
      </body>
    </html>
  );
}

export default RootLayout;
